# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+TITLE: PB's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: hideblocks
#+STARTUP: logdone
#+STARTUP: indent
#+STARTUP: showstars
#+STARTUP: showall
#+PROPERTY:  eval yes
#+PROPERTY: header-args :results silent

* NOTE: to execute, C-c C-v C-b 

* big picture [1/6]
** TODO revisit iedit mode for evil for rectangular edits 
** TODO possible to make tabs nicer? 
my idea is to use the curves from powerline to make nicer tabs. 
** TODO add to prefixes [0/10] 
*** TODO something for expand-region and iedit
*** TODO alignment stuff
*** TODO 0-9 jump to tab 
*** TODO a (applications: todotxt, eventually mail)
*** TODO c (commenting)
*** TODO b (buffers) 
*** TODO f (files) counsel-recentf, counsel-ag, etc.
*** TODO j jump ace-window, avy-char, ivy-avy
*** TODO b (buffers)
*** TODO x (text): some of the spacemacs stuff, also move line up(j), down(k)
** DONE migrate back to org init
CLOSED: [2016-12-31 Sat 09:28]
** TODO turn on visual-line-mode in all text modes
** TODO set which-key to take half the window, on bottom 

* Introduction
** About this file
   :PROPERTIES:
   :CUSTOM_ID: babel-init
   :END:      
<<babel-init>>

This is an effort to write a literate elisp init file. I'm mostly following [[http://pages.sachachua.com/.emacs.d/Sacha.html%5D%5D%20amazing%20work.%20%0A%0A*%20Introduction][Sacha Chua's]] amazing work.

** Why org-mode

Writing this file in org-mode allows me to export it as html (which happens automagically on GitHub), and to mix my thinking with the code. This is another step toward [[http://reproducibleresearch.net][reproducible research]], close to [[https://hrdag.org][HRDAG]]'s "principled data processing" ideas.

** smart parens (to help us find our way)
#+begin_src emacs-lisp 
(use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      (show-smartparens-global-mode t)))
(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+end_src 

** hide customization variables
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el"
 	  kill-buffer-query-functions
 	  (remq 'process-kill-buffer-query-function
 			kill-buffer-query-functions)
 	  user-full-name "Patrick Ball"
 	  user-mail-address "pball@fastmail.fm")
#+end_src

** UI and visuals 
*** Font and theme
#+begin_src emacs-lisp
(defconst my/font "Monaco-13")
(set-face-attribute 'default nil :font "Monaco-13")
(set-frame-font  "Monaco-13"  nil t)
(use-package color-theme
  :ensure t)
(setq custom-safe-themes t)
(use-package hc-zenburn-theme)
(load-theme 'hc-zenburn)
#+end_src 
*** frame and window setup 
#+begin_src emacs-lisp 
(setq ring-bell-function 'ignore)
(show-paren-mode 1)
(tool-bar-mode -1)
(menu-bar-mode t)
(setq show-paren-delay 0
      column-number-mode 1
      inhibit-startup-message t)
(setq-default cursor-type 'bar)
;; (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(fringe-mode '(8 . 2))
#+end_src
** simple starting settings 
*** backups 
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src 
*** auto-save 
#+begin_src emacs-lisp
(use-package super-save 
  :init (super-save-mode +1) 
  :diminish super-save-mode
  :config 
     (setq super-save-auto-save-when-idle t)
     (setq auto-save-default nil))

#+end_src 
*** history 
#+begin_src emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src 

*** simple behaviors
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)          ; don't ask for confirmation when opening
(setq inhibit-startup-screen t)    ; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )   ; silent bell when you make a mistake
(setq sentence-end-double-space nil) ; sentence SHOULD end with only a point.
(setq default-fill-column 80)      ; toggle wrapping text at the 80th
#+end_src 

*** wrapping 
#+begin_src emacs-lisp
(use-package adaptive-wrap
  :ensure t
  :defer t
  :init (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode))
#+end_src
*** encoding
#+begin_src emacs-lisp
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
#+end_src 

*** desktop 
#+begin_src emacs-lisp 
(use-package desktop                    ; Save buffers, windows and frames
  :init (desktop-save-mode 1)
  :config
    (setq desktop-auto-save-timeout 60)
    (setq history-length 250)
    (add-to-list 'desktop-globals-to-save 'file-name-history)
    (setq desktop-path '("~/.emacs.d/")))
#+end_src 

** which-key
#+begin_src emacs-lisp
(use-package which-key 
  :diminish which-key-mode
 :config (progn 
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0.3)
    (setq which-key-side-window-max-height 0.5)
    (which-key-mode 1)))
#+end_src
* evil-mode
** evil package 
the idea of evil-surround is to deal with stuff in "quotes"; it offers a bunch of amazing tools for wrapping a word or visual-state region in "", '', <>, {}, (), etc. 
#+begin_src emacs-lisp
(use-package evil 
  :ensure t
  :config (progn  
    (setcdr evil-insert-state-map nil)  ; no evil-mode in insert.
    (define-key evil-insert-state-map [escape] 'evil-normal-state) 
    (evil-mode 1))
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))
  (use-package evil-indent-textobject
    :ensure t)
)
#+end_src
** evil-iedit-state
expand-region works, as does iedit. but not evil-iedit-state. needs attention.
#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
(use-package iedit)
(use-package evil-iedit-state)
#+end_src
** org-evil FIXME  
#+begin_src emacs-lisp
(use-package org-evil)
#+end_src
** escape from everything
http://www.totherme.org/configs/gds.html#orgheadline10
#+begin_src emacs-lisp
;; (use-package evil-escape
;;  :bind ("<ESC>" evil-escape))
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
(global-set-key [escape] 'evil-exit-emacs-state)
#+end_src

* General 
General defines the leader key. This can be for all states, not just evil-normal. I'll map evil-normal to <SPC> and all other states to M-<SPC>. 
#+begin_src emacs-lisp
(use-package general :ensure t
   :config (progn 
     (general-evil-setup 1)
     (general-define-key
       :states '(normal motion insert emacs)
       :prefix "M-SPC"
       :non-normal-prefix "M-SPC"
       "l" '(avy-goto-line)
       "a" 'align-regexp
       )
     (general-define-key
       :states '(normal)
       :prefix "SPC"
       "g"  '(:ignore t :which-key "Git")
       "gs" '(magit-status :which-key "git status")
     )
     (general-nvmap "j" 'evil-next-visual-line
                    "k" 'evil-previous-visual-line)
))
#+end_src
* Markdown 
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
  :config (progn 
   (add-hook 'markdown-mode-hook 'visual-line-mode)))
#+end_src

* Editing hacks 
** Navigation with avy  
#+begin_src emacs-lisp
(use-package avy 
  :ensure t
  :bind (("s-," . avy-goto-char))
  :config (progn 
    (setq avy-background t)
    (setq avy-style 'post)
    (setq avy-all-windows 'all-frames)))
#+end_src 
** ivy
#+begin_src emacs-lisp
(use-package ivy :ensure t
  :diminish (ivy-mode . "") ; does not display ivy in the modeline
  :init (ivy-mode 1)        ; enable ivy globally at startup
  :bind (:map ivy-mode-map  ; bind in the ivy buffer
         ("C-'" . ivy-avy)) ; C-' to ivy-avy
  :config (progn
    (setq ivy-use-virtual-buffers t)   ; extend searching to bookmarks and â€¦
    (setq ivy-virtual-abbreviate 'full) ; Show the full virtual file paths
    (setq ivy-extra-directories nil) ; default value: ("../" "./")
    (setq ivy-height 20)               ; set height of the ivy window
    (setq ivy-count-format "(%d/%d) ") ; count format, from the ivy help page
    (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
  ))
#+end_src
*** TODO add ivy hydra 
** counsel 
CLOSED: [2017-01-04 Wed 20:35]
#+begin_src emacs-lisp
(use-package counsel :ensure t
  :bind*                           ; load counsel when pressed
  (("M-x"     . counsel-M-x)       ; M-x use counsel
   ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
   ("C-x C-r" . counsel-recentf)   ; search recently edited files
  ))
#+end_src 
** swiper
#+begin_src emacs-lisp
(use-package swiper :ensure t
  :bind* (("C-s" . swiper)))
#+end_src
** TODO Flyspell and flycheck 
remember the osx hack that makes that nice.

* applications [/]
** TODO ranger
** start server 

* mode line 
This is the last piece, but crucial. nice to get the spacemacs one
* Conclusion 
#+begin_src emacs-lisp
(setq initial-scratch-message ";;; Welcome to Emacs, PB.") 
#+end_src
