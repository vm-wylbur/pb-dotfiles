# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+TITLE: PB's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: hideblocks
#+STARTUP: logdone
#+STARTUP: indent
#+STARTUP: showstars
#+PROPERTY:  eval yes
#+PROPERTY: header-args :results silent

* big picture [1/5]
** TODO turn off bells, the rest of the basic setup stuff. 
** TODO possible to make tabs nicer? 
** TODO add to prefixes:
*** TODO 0-9 jump to tab 
*** TODO a (applications: todotxt, eventually mail)
*** TODO c (commenting)
*** TODO b (buffers) 
*** TODO f (files) counsel-recentf, counsel-ag,
*** TODO j jump ace-window, avy-char
*** TODO b (buffers)
*** TODO x (text): some of the spacemacs stuff, also move line up(j), down(k)
;;   
** DONE migrate back to org init
CLOSED: [2016-12-31 Sat 09:28]
** TODO set which-key to take half the window, on bottom 



* Introduction
** About this file
   :PROPERTIES:
   :CUSTOM_ID: babel-init
   :END:
<<babel-init>>


This is an effort to write a literate elisp init file. I'm mostly following [[http://pages.sachachua.com/.emacs.d/Sacha.html%5D%5D%20amazing%20work.%20%0A%0A*%20Introduction][Sacha Chua's]] amazing work.

I'm also trying the set of [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][[[my own spacemacs hacks]]]] (btw: argh! getting visual line mode to work the way I want is an unending PITA).

** Why org-mode

Writing this file in org-mode allows me to export it as html (which happens automagically on GitHub), and to mix my thinking with the code. This is another step toward [[http://reproducibleresearch.net][reproducible research]], close to [[https://hrdag.org][HRDAG]]'s "principled data processing" ideas.

** Starting fresh (about the tenth time)

https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/
** hide customization variables
#+begin_src emacs-lisp 
(setq custom-file "~/.emacs.d/custom.el"
	  kill-buffer-query-functions
	  (remq 'process-kill-buffer-query-function
			kill-buffer-query-functions)
	  user-full-name "Patrick Ball"
	  user-mail-address "pball@fastmail.fm"
#+end_src

** package system bootstrap

#+begin_src emacs-lisp
(package-initialize)

(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
(add-to-list 'load-path "~/.emacs.d/elpa")

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
 (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq use-package-verbose t)
(setq use-package-always-ensure t)
(setq load-prefer-newer t)
(require 'bind-key)
#+end_src

** simple starting settings 
#+begin_src emacs-lisp
(setq delete-old-versions -1 )	; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )      ; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )     ; don't ask for confirmation when opening symlinked file
;; transform backups file name
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) )
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
#+end_src


* General: the key manager
#+begin_src emacs-lisp
(use-package general 
  :ensure t
  :config
    (setq leader "SPC"))
#+end_src 

* which-key
#+begin_src emacs-lisp
(use-package which-key 
  :ensure t
  :init
  (which-key-mode)
  :config (progn 
     (which-key-setup-side-window-bottom)
     (setq which-key-sort-order 'which-key-key-order-alpha
           which-key-side-window-max-width 0.5
           which-key-idle-delay 0.05))
  :diminish which-key-mode)
  #+end_src 

* evil-mode
This is really the key to efficient movement. 

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init (evil-mode 1))
(use-package evil-surround
  :config (global-evil-surround-mode t))
;;(use-package elscreen :ensure t
;;  :quelpa (elscreen fetcher github :repo "vm-wylbur/elscreen")
;;  :config (elscreen-start))
(use-package evil-tabs :ensure t)
#+end_src

* setting up the key jumps with leader 
** setup hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src 
** file hydra
#+begin_src emacs-lisp
(defhydra pb/file-commands (:color blue)
  "files" 
  ("e" pb/emacs-files/body "emacs-files")
  ("f" counsel-find-file "find-file")
  ("r" counsel-recentf "recent-file")
  ("s" save-buffer "save-file"))
#+end_src
*** emacs hydra
#+begin_src emacs-lisp
(defun pb-open-init-file ()
  ;; todo: open in new tab, or switch to tab. 
  "Open the init file." 
  (interactive)
  (find-file user-init-file))
(defun pb-open-init-org-file ()
  (interactive)
  (find-file "~/dotfiles/emacs/pb-init.org"))
(defun pb-rerun-init ()
  (interactive)
  (load-file user-init-file))
(defhydra pb/emacs-files (:color blue)
  "emacs files" 
  ("o" pb-open-init-file "open org init")
  ("i" pb-open-init-org-file "open pb-init.org")
  ("R" pb-rerun-init "eval init.el"))
#+end_src
  
  
** now set up the top-level jumps
#+begin_src emacs-lisp 
(general-define-key 
  :states 'motion
  :prefix leader
    "b SPC" 'switch-to-buffer
    "bk" 'kill-buffer
    "f"   'pb/file-commands/body
    "SPC" 'counsel-M-x)
#+end_src 






* just dumping in starting settings for general, evil, and ivy

#+begin_src emacs-lisp
(use-package ivy :ensure t
  :ensure t
  :diminish ""
  :general
  :init (ivy-mode 1)
  :config
  (general-define-key :keymaps 'ivy-mode-map
		      [escape] 'minibuffer-keyboard-quit))

(use-package counsel 
  :ensure t
  :bind*                           ; load counsel when pressed
  (("M-x"     . counsel-M-x)       ; M-x use counsel
   ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
   ("C-x C-r" . counsel-recentf)   ; search recently edited files
   ("C-c /"   . counsel-ag)        ; search for regexp in git repo using ag
   ("C-c l"   . counsel-locate))   ; search for files or else using locate
  )
#+end_src y
* UI: font, theme, etc
** basic visuals
#+begin_src emacs-lisp
(defconst my/font "Menlo-13")
(set-face-attribute 'default nil :font "Monaco-13")
(set-frame-font  "Monaco-13"  nil t)
(use-package color-theme
  :ensure t)
(setq custom-safe-themes t)
(use-package zenburn-theme :disabled nil
  :ensure t
  :diminish "")
  :config
;; (load-theme 'zenburn)
(use-package hc-zenburn-theme)
(load-theme 'hc-zenburn)
(setq ring-bell-function 'ignore)
(show-paren-mode 1)
(tool-bar-mode -1)
(menu-bar-mode t)
(setq show-paren-delay 0
column-number-mode 1
inhibit-startup-message t)
(setq-default cursor-type 'bar)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(fringe-mode '(8 . 2))
#+end_src

** powerline
#+begin_src emacs-lisp
(use-package powerline
  :ensure t 
  :init 
    (progn 
      (use-package powerline-evil :ensure t)
      (powerline-evil-center-color-theme)))
#+end_src

* Conclusion 

#+begin_src emacs-lisp
(setq initial-scratch-message ";;; Welcome to Emacs, PB.") 
#+end_src
