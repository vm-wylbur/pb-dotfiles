# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+TITLE: PB's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showall
#+STARTUP: logdone
#+PROPERTY:  eval yes

* Configuration
** About this file
   :PROPERTIES:
   :CUSTOM_ID: babel-init
   :END:
<<babel-init>>

* Introduction
#+begin_src emacs-lisp
(message "starting PB's init from org-mode")
#+end_src

#+RESULTS:
: starting PBâ€™s init from org-mode

This is an effort to write a literate elisp init file. I'm mostly following [[http://pages.sachachua.com/.emacs.d/Sacha.html%5D%5D%20amazing%20work.%20%0A%0A*%20Introduction][Sacha Chua's]] amazing work.

This section sets up =use-package=.

#+begin_src emacs-lisp
(setq user-full-name "Patrick Ball")
(setq user-mail-address "pball@hrdag.org")

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
(use-package diminish)
(use-package bind-key)
#+end_src

#+RESULTS:

* Basic Behaviors
*** Backups
#+begin_src emacs-lisp
(setq
 backup-directory-alist '(("." . "~/.emacs.d/backups"))
 delete-old-versions -1
 version-control t
 vc-make-backup-files t
 auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** History
#+begin_src emacs-lisp
(setq
 savehist-file "~/.emacs.d/savehist"
 history-length t
 history-delete-duplicates t
 savehist-save-minibuffer-history 1
 savehist-additional-variables
 '(kill-ring
   search-ring
   regexp-search-ring))
(savehist-mode 1)
(desktop-save-mode 1)
#+end_src

#+RESULTS:
: t

*** UTF-8
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

#+RESULTS:
: utf-8-unix


* Little hacks
There aren't any now, but there will be. 

* Searching, buffers, and other finding bits

** Helm 
  #+begin_src emacs-lisp

  #+end_src




* Editing
** Autocomplete with =company-mode=
  #+begin_src emacs-lisp

  #+end_src

** snippets hydra

* Navigation

** A better =C-a=
From [[https://github.com/bbatsov/crux/blob/master/crux.el][=crux=]]
  #+begin_src emacs-lisp
;;
(defun crux-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
  #+end_src

** Dragging stuff w =super-up,down=
This means that M-up|down|right|left drag line or the region.
  #+begin_src emacs-lisp
(use-package drag-stuff
  :diminish ""
  :config
    (drag-stuff-global-mode 1)
  :bind* (
    ([(super up)] . drag-stuff-up)
    ([(super down)] . drag-stuff-down)))
  #+end_src

  #+RESULTS:


** =avy= and =ace= 
  #+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    )
  :bind ("C-'" . ace-window)
  :config (progn (setq
		  aw-keys '(?f ?g ?h ?j ?k ?l)
		  aw-background nil)))

  #+end_src

  #+RESULTS:

# end.
