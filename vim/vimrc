" Preamble {{{
" Author: [Patrick Ball](mailto://pball@hrdag.org)
" (c) 2017 [HRDAG](https://hrdag.org), GPL-2 or later
" install by symlinking to ~/.vimrc
" }}}
" todo: {{{
" * where is F being remapped? not ok!
" * open_file_under_cursor
" * leader stuff
" * add machinename to status line
" * indenting in vimrc?
" }}}
" setup {{{
set nocompatible
filetype plugin on
" }}}
" leader {{{
let mapleader = ','
nnoremap <leader>w :w <CR>
nnoremap <leader>e :ll <CR>
nnoremap <leader>m :marks <CR>       " go w single-quote '
nnoremap <leader>r :registers <CR>   " access w double-quote "
nnoremap <leader>f :browse oldfiles <CR>
" nnoremap <leader>b :tab sball <CR>   " moves all buffers to tabs
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
" }}}
" Python {{{
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self
au FileType python map <buffer> F :set foldmethod=indent<cr>
au FileType python set cindent
au FileType python set cinkeys-=0#
au FileType python set indentkeys-=0#
" }}}
" Auto commands at save {{{
set autoread
augroup autoSaveAndRead
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
augroup END
autocmd BufWritePre * :%s/\s\+$//e  " removes training whitespace
" }}}
" Plug {{{
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'itchyny/lightline.vim'
Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'ervandew/supertab'
Plug 'reedes/vim-pencil'
Plug 'altercation/vim-colors-solarized'
" Plug 'haya14busa/incsearch.vim'  " seems to work sporadically
call plug#end()
" }}}
" initialize plugins {{{
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'
augroup pencil
    autocmd!
    autocmd FileType markdown,mkd  call pencil#init()
    autocmd FileType text          call pencil#init()
augroup END
autocmd FileType markdown,mkd setlocal spell
" doesn't really work?
" nnoremap z/  <Plug>(incsearch-forward)
" nnoremap z?  <Plug>(incsearch-backward)

" }}}
" syntastic {{{
let g:syntastic_python_checkers=['pep8']
"let g:syntastic_python_checkers=['flake8']
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" }}}
" status line {{{
set laststatus=2
" todo: shorten mode name
" this was stolen from someone, can't remember whom
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ ['mode', 'paste'],
        \             ['readonly', 'fullpath', 'modified'] ],
        \   'right': [ [ 'lineinfo' ], ['percent'], ['filetype'] ]
        \ },
        \ 'component': {
        \   'readonly': '%{&filetype=="help"?"":&readonly?"ðŸ”’ ":""}',
        \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
        \   'fullpath': '%F'
        \ },
	\'component_function': {
	\    'mode' :  'MyMode',
	\    'filetype' : 'MyFiletype'
	\ },
        \ 'component_visible_condition': {
        \   'readonly': '(&filetype!="help"&& &readonly)',
        \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
        \ },
        \ 'separator': { 'left': ' ', 'right': ' ' },
        \ 'subseparator': { 'left': ' ', 'right': ' ' }
        \ }
        let g:lightline.mode_map = {
            \ 'n'      : ' N ',
            \ 'i'      : ' I ',
            \ 'R'      : ' R ',
            \ 'v'      : ' V ',
            \ 'V'      : 'V-L',
            \ 'c'      : ' C ',
            \ "\<C-v>" : 'V-B',
            \ 's'      : ' S ',
            \ 'S'      : 'S-L',
            \ "\<C-s>" : 'S-B',
            \ '?'      : '      ' }

        function! MyMode()
            let fname = expand('%:t')
            return fname == '__Tagbar__' ? 'Tagbar' :
                    \ fname == 'ControlP' ? 'CtrlP' :
                    \ winwidth('.') > 60 ? lightline#mode() : ''
        endfunction
        function! MyFiletype()
            return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
        endfunction

" }}}
" visual interface: colors, cursors, numbering {{{
set relativenumber
set number
set noshowmode
syntax enable
set background=dark
colorscheme solarized
set guifont=Monaco:h14
nnoremap <C-h> :set number! relativenumber! <CR>
" sets diff cursors for modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" }}}
" whitespace vis {{{
" highlight Conceal guibg=NONE ctermbg=NONE ctermfg=DarkGrey
" autocmd BufWinEnter,BufReadPre * setlocal conceallevel=2 concealcursor=nv
" autocmd BufWinEnter,BufReadPre * syn match LeadingSpace /\(^ *\)\@<= / containedin=ALL conceal cchar=Â·
" set list listchars=tab:â†’\ ,eol:Â¬
set list listchars=tab:â†’\ ,
" " }}}
" Folding {{{
set foldenable
set foldlevelstart=10
set foldnestmax=10
nnoremap <space> za
set foldmethod=indent
" }}}

set modelines=1
" vim:foldmethod=marker:foldlevel=0
