"
" Author: [Patrick Ball](mailto://pball@hrdag.org)
" git@github.com:vm-wylbur/pb-dotfiles.git
" (c) 2022 [HRDAG](https://hrdag.org), GPL-2 or later
"
" pb-dotfiles/nvim/init.vim symlinked to ~/.config/nvim/init.vim
"
" setup
set nocompatible
let g:python_host_skip_check = 1
let g:python3_host_skip_check = 1
let g:vim_bootstrap_editor = 'nvim'				" nvim or vim
let g:python3_host_prog = '/opt/anaconda3/bin/python3'
set runtimepath+=$HOME/dotfiles/vim-common
set updatetime=300

" plugins
call plug#begin(expand('~/.config/nvim/plugged'))

"" hack for plugins themselves
" Plug 'tpope/vim-repeat'               " doesn't work? config for surround

" screen and window management
Plug 'mhinz/vim-startify'             " cute!
Plug 'qpkorr/vim-bufkill'             " :BD is very useful

" editing and formatting
" Plug 'tpope/vim-surround'             " adds surround action to create cmts
Plug 'tomtom/tcomment_vim'            " gc to toggle comments
Plug 'ntpeters/vim-better-whitespace' " to remove trailing whitespace on save
Plug 'machakann/vim-highlightedyank'  " blink
Plug 'haya14busa/incsearch.vim'

" completion
" Plug 'lifepillar/vim-mucomplete'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" navigation
Plug 'justinmk/vim-sneak'        " I should use this more.
Plug '/usr/local/opt/fzf'

" snippets
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

"" files, buffers, and tags
Plug 'ap/vim-buftabline'         " adds buffer tabs and numbers
Plug 'majutsushi/tagbar'

" colors and UI
Plug 'airblade/vim-gitgutter'          " put chars in gutter
Plug 'kshenoy/vim-signature'           " less cluttered, marks more visible
Plug 'itchyny/lightline.vim'           " workable. Prob could be done by hand.
Plug 'luochen1990/rainbow'             " I really like these!
Plug 'itchyny/vim-cursorword'          " this works w * operator
Plug 'lifepillar/vim-solarized8'

" languages
Plug 'lervag/vimtex'
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'reedes/vim-pencil'
Plug 'vim-scripts/dbext.vim'

" markdown stuff
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'vim-pandoc/vim-rmarkdown'

" linting

" for firenvim
" post-plugin-install: :call firenvim#install(0)
" Plug 'glacambre/firenvim'
call plug#end()

" must follow all Plug calls
filetype plugin indent on

colorscheme solarized8_high
set background=dark

"---temp------------------------------
" TODO: setup exuberant ctags
" nnoremap gt :TagbarToggle<CR>
" TESTING: tComment vs tpope's vim-commentary

set listchars=eol:⏎,tab:␉·,trail:␠,nbsp:⎵

source $HOME/dotfiles/vim-common/line.vimrc   " for the lightline config
source $HOME/dotfiles/vim-common/plugins.vim

" terminal stuff, neovim specific
tnoremap <Esc> <C-\><C-n>
tnoremap jj <c-\><c-n>
tnoremap jk <c-\><c-n>:q<cr>
highlight! link TermCursor Cursor
highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
" Change cursor shape between insert and normal mode in iTerm2.app

" note quite with :w | bd  which should be <leader> gw
let $GIT_EDITOR = 'nvr -cc split --remote-wait'
let g:vimtex_compiler_progname = 'nvr'

"" TODO: move to common file
" Autocomplete

" Wildmenu
set wildignore+=.DS_Store,Icon\?,*.dmg,*.git,*.pyc,*.o,*.obj,*.so,*.swp,*.zip
set wildmenu " Show possible matches when autocompleting
set wildignorecase " Ignore case when completing file names and directories
"


"" terminal config
" TODO: stop spellcheck in terminal
au TermOpen * setlocal nonumber norelativenumber nospell

" Coc
let g:coc_node_path = '/usr/bin/node'
let g:coc_global_extensions = [
			\ 'coc-pyright',
			\ 'coc-mypy']

" from README
" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" --- end CoC

" w0rp/ale
" let g:ale_linters = {
" 			\	   'python': ['flake8'],
" 			\	   'r': ['lintr'],
" 			\	   'sh': ['shell'],
" 			\	   'yaml': ['yamllint'],
" 			\	   'tex': ['chktex'],
" 			\	   'vim': ['vint'],
" \}
" let g:ale_fixers = {'r': ['styler']}
" let g:ale_enabled = 1
" let g:ale_sign_warning = '▲'
" let g:ale_sign_error = '✗'
" highlight link ALEWarningSign String
" highlight link ALEErrorSign Title
" let g:ale_sign_column_always = 1
" let g:ale_change_sign_column_color = 0
" let g:ale_vim_vint_show_style_issues = 1
" let g:ale_set_loclist = 0
" let g:ale_set_quickfix = 1
" let g:ale_virtualenv_dir_names = []
" let b:ale_virtualenv_dir_names = []
" let g:ale_lint_on_insert_leave = 0
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_save = 1


"" python
" augroup vimrc-python
"   autocmd!
"   autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
"       \ formatoptions+=croq softtabstop=4
"       \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
" augroup END

" jedi-vim
" let g:jedi#popup_on_dot = 0
" let g:jedi#force_py_version = 3
" let g:jedi#documentation_command = 'K'
" let g:jedi#usages_command = '<leader>n'
" let g:jedi#rename_command = '<leader>r'
" let g:jedi#show_call_signatures = '0'
" let g:jedi#completions_command = '<C-Space>'
" let g:jedi#smart_auto_mappings = 0

" let g:polyglot_disabled = ['python', 'tex', 'markdown']
let g:python_highlight_all = 1

source $HOME/dotfiles/vim-common/remaps.vim
source $HOME/dotfiles/vim-common/sets.vim
source $HOME/dotfiles/vim-common/gui.vim
source $HOME/dotfiles/vim-common/autogrp.vim

nnoremap <leader>ev :e $HOME/dotfiles/nvim/init.vim<cr>
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" done.
